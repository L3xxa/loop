
# Generated by Qodo Gen

import unittest
from main import multiplication

class TestMultiplication(unittest.TestCase):

    # Generates a 10x10 multiplication table
    def test_generate_10x10_table(self):
        from io import StringIO
        import sys

        # Redirect stdout to capture print statements
        captured_output = StringIO()
        sys.stdout = captured_output

        multiplication()

        # Reset redirect.
        sys.stdout = sys.__stdout__

        output = captured_output.getvalue().strip().split('\n')
        self.assertEqual(len(output), 10)
        for line in output:
            self.assertEqual(len(line.split(' ')), 10)

    # Handles the smallest multiplier value correctly (1)
    def test_smallest_multiplier(self):
        from io import StringIO
        import sys

        # Redirect stdout to capture print statements
        captured_output = StringIO()
        sys.stdout = captured_output

        multiplication()

        # Reset redirect.
        sys.stdout = sys.__stdout__

        output = captured_output.getvalue().strip().split('\n')
        first_line = output[0].split(' ')
        expected_first_line = [f'1*{j}={j}' for j in range(1, 11)]
        self.assertEqual(first_line, expected_first_line)

    # Handles the largest multiplier value correctly (10)
    def test_largest_multiplier(self):
        from io import StringIO
        import sys

        # Redirect stdout to capture print statements
        captured_output = StringIO()
        sys.stdout = captured_output

        multiplication()

        # Reset redirect.
        sys.stdout = sys.__stdout__

        output = captured_output.getvalue().strip().split('\n')
        last_line = output[-1].split(' ')
        expected_last_line = [f'10*{j}={10*j}' for j in range(1, 11)]
        self.assertEqual(last_line, expected_last_line)